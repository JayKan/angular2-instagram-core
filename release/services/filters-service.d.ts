import 'rxjs/add/operator/map';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs/Observable';
import { Http } from '@angular/http';
import { AppState, FilterStyle, OverlayStyle } from '../interfaces';
import { FiltersActions } from '../actions/filters-actions';
export declare class FiltersService {
    private store$;
    private actions;
    private http;
    static CONTRAST: string;
    static BRIGHTNESS: string;
    static SATURATE: string;
    static SEPIA: string;
    static GRAYSCALE: string;
    static INVERT: string;
    static HUE_ROTATE: string;
    static BLUR: string;
    static BLEND: string;
    static PRESET: string;
    static IMAGE: string;
    static LOADING: string;
    contrast$: Observable<number>;
    brightness$: Observable<number>;
    saturate$: Observable<number>;
    sepia$: Observable<number>;
    grayscale$: Observable<number>;
    invert$: Observable<number>;
    hueRotate$: Observable<number>;
    blur$: Observable<number>;
    blend$: Observable<string>;
    overlayStyle$: Observable<OverlayStyle>;
    filterStyle$: Observable<FilterStyle>;
    selectedImage$: Observable<string>;
    images$: Observable<any>;
    error$: Observable<string>;
    loading$: Observable<boolean>;
    private cache;
    constructor(store$: Store<AppState>, actions: FiltersActions, http: Http);
    change({value, type}: {
        value: any;
        type: string;
    }): void;
    changeContrast(value: number): void;
    changeBrightness(value: number): void;
    changeSaturate(value: number): void;
    changeSepia(value: number): void;
    changeGrayScale(value: number): void;
    changeInvert(value: number): void;
    changeHueRotate(value: number): void;
    changeBlur(value: number): void;
    changeBlend(value: string): void;
    changePreset(value: {
        figureStyle: any;
        overlayStyle: any;
        key: string;
    }): void;
    changeSelectImage(value: string): void;
    loadAllImages(): void;
    resetToDefaults(): void;
    changeLoading(value: boolean): void;
    fetchImages(url: string): Observable<any>;
}
