import '@ngrx/core/add/operator/select';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/map';
import { Observable } from 'rxjs/Observable';
import { AppState, FiltersState, FilterStyle, OverlayStyle } from '../interfaces';
export declare function getFiltersState(state$: Observable<AppState>): Observable<FiltersState>;
export declare function getFilterStyleValue(state$: Observable<AppState>): Observable<FilterStyle>;
export declare function getOverlayStyleValue(state$: Observable<AppState>): Observable<OverlayStyle>;
export declare function getContrastFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getBrightnessFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getSaturateFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getSepiaFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getGrayScaleFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getInvertFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getHueRotateFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getBlurFilterValue(state$: Observable<AppState>): Observable<number>;
export declare function getBlendFilterValue(state$: Observable<AppState>): Observable<string>;
export declare function getSelectedImage(state$: Observable<AppState>): Observable<string>;
export declare function getImages(state$: Observable<AppState>): Observable<any>;
export declare function getError(state$: Observable<AppState>): Observable<string>;
export declare function getLoading(state$: Observable<AppState>): Observable<boolean>;
